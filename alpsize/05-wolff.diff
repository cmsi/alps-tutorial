--- alpsize-04-stl/wolff.C	2013-05-01 14:14:03.000000000 +0900
+++ alpsize-05-boost/wolff.C	2013-05-01 14:14:04.000000000 +0900
@@ -28,9 +28,10 @@
 *
 *****************************************************************************/
 
+#include <boost/array.hpp>
+#include <boost/random.hpp>
+#include <boost/timer.hpp>
 #include <cmath>
-#include <cstdlib>
-#include <ctime>
 #include <iostream>
 #include <stack>
 #include <vector>
@@ -42,20 +43,10 @@
 #define MCTHRM (MCSTEP >> 3)
 #define SEED 93812
 
-double random_01() {
-  return (double)(std::rand()) / RAND_MAX;
-}
-
-struct vec4 {
-  int& operator[](int i) { return nn_[i]; }
-  int operator[](int i) const { return nn_[i]; }
-  int nn_[4];
-};
-
 int main() {
 
   // setting up square lattice
-  std::vector<vec4> nn(N);
+  std::vector<boost::array<int, 4> > nn(N);
   for (int y = 0; y < L; ++y)
     for (int x = 0; x < L; ++x) {
       nn[x+L*y][0] = ((x+L-1)%L) + L*y;
@@ -65,7 +56,9 @@
     }
 
   // random number generator
-  srand(SEED);
+  boost::mt19937 eng(SEED);
+  boost::variate_generator<boost::mt19937&, boost::uniform_real<> >
+    random_01(eng, boost::uniform_real<>());
 
   // spin configuration
   std::vector<int> spin(N, 1);
@@ -83,7 +76,7 @@
   double m4 = 0;
 
   // timer
-  std::clock_t tm = std::clock();
+  boost::timer tm;
 
   for (int mcs = 0; mcs < MCSTEP + MCTHRM; ++mcs) {
     int s = static_cast<int>(random_01() * N);
@@ -117,7 +110,7 @@
   std::cout << "Magnetization^2 = " << m2 / MCSTEP << std::endl;
   std::cout << "Magnetization^4 = " << m4 / MCSTEP << std::endl;
   std::cout << "Binder Ratio of Magnetization = " << m2 * m2 / m4 / MCSTEP << std::endl;
-  std::cerr << "Elapsed time = " << std::difftime(std::clock(), tm) / CLOCKS_PER_SEC << " sec\n";
+  std::cerr << "Elapsed time = " << tm.elapsed() << " sec\n";
 
   return 0;
 }
